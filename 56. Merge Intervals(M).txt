class Solution {
    public int[][] merge(int[][] intervals) {
        Listint[] result = new ArrayList();
        Arrays.sort(intervals, (a, b) - Integer.compare(a[0], b[0]));
        int[] bufferInterval = intervals[0];
        for(int i = 1; i  intervals.length; i++) {
            if(bufferInterval[1] = intervals[i][0]) {
                if(bufferInterval[1] = intervals[i][1]) {
                    bufferInterval[1] = intervals[i][1];
                }
            } else {
                result.add(new int[]{bufferInterval[0], bufferInterval[1]});
                bufferInterval = intervals[i];
            }
        }
        result.add(new int[]{bufferInterval[0], bufferInterval[1]});
        int sol[][] = new int[result.size()][];
        return result.toArray(sol);
    }
}


first sort by starting point
if the end of our buffer interval is greater than the start of the interval we are looking at, then merge them
[[1,3],[2,6],[5,10],[15,18]]
initially our buffer interval is [1,3]
 = [1,6] [5,10]
 = [1,10] [15,18]
 = once two intervals can't merge, we put our buffer interval into final solution and use the current interval as our new buffer interval
 but only when we look at two intervals will we put a interval into the final solution, so the last interval will be left out(corner case)

