class Solution {
    
    class TrieNode {
        TrieNode[] children = new TrieNode[26];
        boolean isWord = false;
        String word = null;
    }
    
    static int[][] dirs = new int[][] {{-1,0},{1,0},{0,-1},{0,1}};
    TrieNode head = new TrieNode();
    TrieNode cur = head;
    
    public void insert (String word) {
        
        for (int i = 0; i < word.length(); i++) {
            char curChar = word.charAt(i);
            TrieNode next = cur.children[curChar - 'a'];
            if (next == null) {
                next = new TrieNode();
                cur.children[curChar - 'a'] = next;
            }
            cur = next;
        }
        cur.isWord = true;
        cur.word = word;
        cur = head;
    }
    
    public List<String> findWords(char[][] board, String[] words) {
        List<String> result = new ArrayList<>();
        boolean[][] dedup = new boolean[board.length][board[0].length];
        
        for (String word : words) { //create the trie with words
            insert(word);
        }
        
        for (int i = 0; i < board.length; i++) { // go through all the inital places in this board
            for (int j = 0; j < board[0].length; j++) {
                if (!checkHead(board[i][j])) {// if the dict doesn't have a word with such a char as first character, skip to the next position
                    continue;
                }
                dedup[i][j] = true;
                cur = cur.children[board[i][j] - 'a'];
                helper(i, j, cur, board, result, dedup);
                cur = head;
                dedup[i][j] = false;
            }
        }
        return result;
    }
    
    public void helper(int row, int col, TrieNode current, char[][] board, List<String> result, boolean[][] dedup) { // can do either bfs or dfs
        if (current.isWord == true) {
            if (!result.contains(current.word))
            result.add(new String(current.word));
        }
        
        for (int[] dir : dirs) {
            
            if (validDir(row + dir[0], col + dir[1], current, board, dedup)) {
                dedup[row + dir[0]][col + dir[1]] = true;
                helper(row + dir[0], col + dir[1], current.children[board[row + dir[0]][col + dir[1]] - 'a'], board, result, dedup);
                dedup[row + dir[0]][col + dir[1]] = false;
            }
        }
        
    }
    
    public boolean validDir(int row, int col, TrieNode current, char[][] board, boolean[][] dedup){
        if (row < 0 || row >= board.length || col < 0|| col >= board[0].length || current.children[board[row][col] - 'a'] == null || dedup[row][col] == true) {
            return false;
        }
        return true;
    }
    
    
    public boolean checkHead (char c){
        if (head.children[c - 'a'] == null) {
            return false;
        }
        return true;
    }
    
}

// in word search 1, we can just prone branches by checking whether the current char at word is the char

// but in this question, there are more than one word, so we need to check all of them at index i