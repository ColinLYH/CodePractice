class WordDictionary {
    TrieNode head = new TrieNode();
    TrieNode cur = head;
    /** Initialize your data structure here. */
    public WordDictionary() {
        
    }
    
    public void addWord(String word) {
        cur = head;
        for (int i = 0; i < word.length(); i++) {
            TrieNode next = cur.children[word.charAt(i) - 'a'];
            if (next == null) {
                next = new TrieNode();
                cur.children[word.charAt(i) - 'a'] = next;
            }
            cur = next;
        }
        cur.isWord = true;
    }
    
    public boolean search(String word) {
        cur = head;
        Deque<TrieNode> allPossibleWords = new ArrayDeque<>();
        allPossibleWords.add(cur);
        for (int i = 0; i < word.length(); i++) {
            char curChar = word.charAt(i);
            
            if (curChar == '.') {
                getAllPossibleWords(word, i, allPossibleWords);
                continue;
            }
            int size = allPossibleWords.size();
            while (size-- > 0) {
                TrieNode curNode = allPossibleWords.pollFirst();
                if (curNode.children[curChar - 'a'] != null) {
                    allPossibleWords.offerLast(curNode.children[curChar - 'a']);
                }
            }
        }
        for (TrieNode node : allPossibleWords) {
            if (node.isWord == true) {
                return true;
            } 
        }
        return false;
    }
    
    public void getAllPossibleWords(String word, int index, Deque<TrieNode> allPossibleWords){
        int size = allPossibleWords.size();
        while (size-- > 0) {
            TrieNode curNode = allPossibleWords.pollFirst();
            for (int i = 0; i < 26; i++) {
                if (curNode.children[i] != null) {
                    allPossibleWords.offerLast(curNode.children[i]);
                }
            }
        }
	}
}

class TrieNode {
    TrieNode[] children = new TrieNode[26];
    boolean isWord = false;
    
    public TrieNode(){
        
    }
}