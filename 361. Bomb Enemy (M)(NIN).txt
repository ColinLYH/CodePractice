class Solution {
    public int maxKilledEnemies(char[][] grid) {
        if (grid.length == 0) {
            return 0;    
        }
        
        int globalMax = 0;
        int eCountRow = 0;
        int[] eCountCol = new int[grid[0].length];
        for(int row = 0; row < grid.length; row++) {
            for(int col = 0; col < grid[0].length; col++) {
                
                if (col == 0 || grid[row][col - 1] == 'W') {
                    eCountRow = 0;
                    int pos = col;
                    while(pos < grid[0].length && grid[row][pos] != 'W') {
                        if(grid[row][pos] == 'E') {
                            eCountRow++;
                        }
                        pos++;
                    }
                }
                
                if (row == 0 || grid[row - 1][col] == 'W') {
                    eCountCol[col] = 0;
                    int pos = row;
                    while(pos < grid.length && grid[pos][col] != 'W') {
                        if(grid[pos][col] == 'E') {
                            eCountCol[col]++;
                        }
                        pos++;
                    }
                }
                
                if (grid[row][col] == '0') {
                    globalMax = Math.max(globalMax, eCountRow + eCountCol[col]);
                }
            }
        }
        return globalMax;
    }
}


// ["0","E","0","0"]
// ["E","0","W","E"]
// ["0","E","0","0"]
//brute force:
//for every 0 position in this matrix, go up,down,left,right,four directions and add all the E together, and update global max's position
//time complexity: m row, n col
// (m+n)m*n

//DP:
//go through the row if at column 0 OR right after a wall
//go through the col if at row 0 OR right down a wall
//at certain position, after gone through the calculation of row and col, add them together and update the global max

// ["0","E","0","0"]
// ["E","0","W","E"]
// ["0","E","0","0"]

